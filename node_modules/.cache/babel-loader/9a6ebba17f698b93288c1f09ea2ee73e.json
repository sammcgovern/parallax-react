{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { getCoursesList } from '../../fetches/getCoursesList';\nimport { Button } from '../Button';\nimport { CourseTable } from '../table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrainingCourses = () => {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [coursesList, setCoursesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n\n  const getCategories = () => {\n    setLoading(true);\n    fetch(\"https://frontend-trial-api.qa.parallax.dev/api/categories\").then(res => res.json()).then(res => {\n      console.log(res);\n      setCategories(res.courses.data);\n      setLoading(false);\n    });\n  };\n\n  const getLocation = () => {\n    setLoading(true);\n    fetch(\"https://frontend-trial-api.qa.parallax.dev/api/locations\").then(res => res.json()).then(res => {\n      console.log(res);\n      setLocations(res.courses.data);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    getCategories();\n    getLocation();\n    getCoursesList({\n      setLoading,\n      setCoursesList,\n      setApiData,\n      coursesList,\n      page,\n      apiData\n    });\n  }, [page]);\n  let categoriesOptions = []; // Make unique\n\n  categories.map(x => categoriesOptions === null || categoriesOptions === void 0 ? void 0 : categoriesOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n  let locationOptions = []; // // Make unique\n\n  locations.map(x => locationOptions === null || locationOptions === void 0 ? void 0 : locationOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n\n  const filterCourses = () => {\n    setLoading(true);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": selectedLocations.map(x => x.value)\n      })\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions).then(response => response.json()).then(res => {\n      console.log(res);\n      setCoursesList(res.courses.data);\n      setApiData(res.courses);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    if (selectedCategories.length > 0) {\n      filterCourses();\n    } else {\n      getCoursesList({\n        setLoading,\n        setCoursesList,\n        setApiData,\n        coursesList,\n        page,\n        apiData\n      });\n    }\n  }, [selectedCategories, selectedLocations]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Category\",\n      onChange: newValue => {\n        setSelectedCategories(newValue);\n      },\n      options: categoriesOptions,\n      isMulti: true,\n      isClearable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Location\",\n      onChange: newValue => {\n        setSelectedLocations(newValue);\n      },\n      options: locationOptions,\n      isMulti: true,\n      isClearable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CourseTable, {\n      coursesList: coursesList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), (apiData === null || apiData === void 0 ? void 0 : apiData.current_page) !== (apiData === null || apiData === void 0 ? void 0 : apiData.last_page) && /*#__PURE__*/_jsxDEV(Button, {\n      onClick: () => setPage(page + 1),\n      title: loading ? \"Loading...\" : \"Load more\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrainingCourses, \"iDHoRMMWXxlLF589nr38U25W++U=\");\n\n_c = TrainingCourses;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainingCourses\");","map":{"version":3,"sources":["/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx"],"names":["React","useEffect","useState","Select","getCoursesList","Button","CourseTable","TrainingCourses","page","setPage","coursesList","setCoursesList","loading","setLoading","apiData","setApiData","categories","setCategories","selectedCategories","setSelectedCategories","locations","setLocations","selectedLocations","setSelectedLocations","getCategories","fetch","then","res","json","console","log","courses","data","getLocation","categoriesOptions","map","x","push","value","slug","label","name","locationOptions","filterCourses","requestOptions","method","headers","body","JSON","stringify","response","length","newValue","current_page","last_page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select, { MultiValue } from 'react-select';\nimport { getCoursesList } from '../../fetches/getCoursesList';\n\nimport { Category, Course, Courses, Location } from '../../types';\nimport { Button } from '../Button';\nimport { CourseTable } from '../table';\n\nexport const TrainingCourses: React.FC = () => {\n\n  const [page, setPage] = useState<number>(1);\n  const [coursesList, setCoursesList] = useState<Course[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState<Courses>();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<MultiValue<{ value: string; label: string; }>>([]);\n  const [locations, setLocations] = useState<Location[]>([]);\n  const [selectedLocations, setSelectedLocations] = useState<MultiValue<{ value: string; label: string; }>>([]);\n\n\n  const getCategories = () => {\n    setLoading(true);\n    fetch(\"https://frontend-trial-api.qa.parallax.dev/api/categories\")\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        setCategories(res.courses.data)\n        setLoading(false);\n      });\n  }\n  const getLocation = () => {\n    setLoading(true);\n    fetch(\"https://frontend-trial-api.qa.parallax.dev/api/locations\")\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        setLocations(res.courses.data)\n        setLoading(false);\n      });\n  }\n \n  useEffect(() => {\n    getCategories();\n    getLocation();\n    getCoursesList({ setLoading, setCoursesList, setApiData, coursesList, page, apiData });\n  }, [page]);\n\n  let categoriesOptions: { value: string; label: string }[] = [];\n  // Make unique\n  categories.map(x => categoriesOptions?.push({ value: x.slug, label: x.name }));\n\n  let locationOptions: { value: string; label: string }[] = [];\n  // // Make unique\n  locations.map(x => locationOptions?.push({ value: x.slug, label: x.name }));\n\n  const filterCourses = () => {\n    setLoading(true);\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": selectedLocations.map(x => x.value),\n      }\n      )\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions)\n      .then(response => response.json())\n      .then(res => {\n        console.log(res);\n        setCoursesList(res.courses.data);\n        setApiData(res.courses)\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (selectedCategories.length > 0) {\n      filterCourses();\n    } else {\n      getCoursesList({ setLoading, setCoursesList, setApiData, coursesList, page, apiData });\n    }\n\n  }, [selectedCategories, selectedLocations]);\n\n  return (\n    <div className=\"App\">\n      <Select\n        placeholder=\"Category\"\n        onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n          setSelectedCategories(newValue)\n        }}\n        options={categoriesOptions}\n        isMulti={true}\n        isClearable={true}\n      />\n      <Select\n        placeholder=\"Location\"\n        onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n          setSelectedLocations(newValue)\n        }}\n        options={locationOptions}\n        isMulti={true}\n        isClearable={true}\n      />\n\n      <CourseTable coursesList={coursesList} />\n\n      {apiData?.current_page !== apiData?.last_page && (\n        <Button onClick={() => setPage(page + 1)} title={loading ? \"Loading...\" : \"Load more\"} />\n      )}\n    </div>\n  )\n};\n"]},"metadata":{},"sourceType":"module"}