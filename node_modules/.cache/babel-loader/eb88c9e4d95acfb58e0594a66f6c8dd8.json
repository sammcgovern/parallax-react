{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrainingCourses = () => {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [coursesList, setcoursesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n\n  if (page > 1) {\n    url = (apiData === null || apiData === void 0 ? void 0 : apiData.next_page_url) || url;\n  }\n\n  const categoriesUrl = 'https://frontend-trial-api.qa.parallax.dev/api/categories';\n  const locationUrl = 'https://frontend-trial-api.qa.parallax.dev/api/locations';\n\n  const getCategories = () => {\n    setLoading(true);\n    fetch(categoriesUrl).then(res => res.json()).then(res => {\n      console.log(res);\n      setCategories(res.courses.data);\n      setLoading(false);\n    });\n  };\n\n  const getLocation = () => {\n    setLoading(true);\n    fetch(locationUrl).then(res => res.json()).then(res => {\n      console.log(res);\n      setLocations(res.courses.data);\n      setLoading(false);\n    });\n  };\n\n  const getcoursesList = () => {\n    setLoading(true);\n    fetch(url).then(res => res.json()).then(res => {\n      setcoursesList([...coursesList, ...res.courses.data]);\n      setApiData(res.courses);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    getCategories();\n    getLocation();\n    getcoursesList();\n  }, [page]);\n  let categoriesOptions = []; // Make unique\n\n  categories.map(x => categoriesOptions === null || categoriesOptions === void 0 ? void 0 : categoriesOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n  let locationOptions = []; // // Make unique\n\n  locations.map(x => locationOptions === null || locationOptions === void 0 ? void 0 : locationOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n\n  const filterCourses = () => {\n    // POST request using fetch inside useEffect React hook\n    console.log(selectedCategories.map(x => x.value));\n    setLoading(true);\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": selectedLocations.map(x => x.value)\n      })\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions).then(response => response.json()).then(res => {\n      console.log(res);\n      setcoursesList(res.courses.data);\n      setApiData(res.courses);\n      setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    if (selectedCategories.length > 0) {\n      filterCourses();\n    } else {\n      getcoursesList();\n    }\n  }, [selectedCategories, selectedLocations]);\n  console.log(locations);\n  console.log(locationOptions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Category\",\n      onChange: newValue => {\n        setSelectedCategories(newValue);\n      },\n      options: categoriesOptions,\n      isMulti: true,\n      isClearable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Location\",\n      onChange: newValue => {\n        setSelectedLocations(newValue);\n      },\n      options: locationOptions,\n      isMulti: true,\n      isClearable: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Course\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"ID\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Price\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Location\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Dates\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Link\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: coursesList.map(item => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.id\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.price\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: item.location\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: `${item.starts_at} - ${item.ends_at}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 17\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), (apiData === null || apiData === void 0 ? void 0 : apiData.current_page) !== (apiData === null || apiData === void 0 ? void 0 : apiData.last_page) && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-load-more\",\n      onClick: () => setPage(page + 1),\n      children: loading ? 'Loading...' : 'Load More '\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 56\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrainingCourses, \"lx+bdNcV34gr8/XGDbUYxHCC1P8=\");\n\n_c = TrainingCourses;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainingCourses\");","map":{"version":3,"sources":["/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx"],"names":["React","useEffect","useState","Select","TrainingCourses","page","setPage","coursesList","setcoursesList","loading","setLoading","apiData","setApiData","categories","setCategories","selectedCategories","setSelectedCategories","locations","setLocations","selectedLocations","setSelectedLocations","url","next_page_url","categoriesUrl","locationUrl","getCategories","fetch","then","res","json","console","log","courses","data","getLocation","getcoursesList","categoriesOptions","map","x","push","value","slug","label","name","locationOptions","filterCourses","requestOptions","method","headers","body","JSON","stringify","response","length","newValue","item","id","price","location","starts_at","ends_at","current_page","last_page"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select, { MultiValue } from 'react-select';\n\nimport { Category, Course, Courses, Location } from '../../types';\n\nexport const TrainingCourses: React.FC = () => {\n\n  const [page, setPage] = useState(1);\n  const [coursesList, setcoursesList] = useState<Course[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState<Courses>();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<MultiValue<{ value: string; label: string; }>>([]);\n  const [locations, setLocations] = useState<Location[]>([]);\n  const [selectedLocations, setSelectedLocations] = useState<MultiValue<{ value: string; label: string; }>>([]);\n\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n  if (page > 1) {\n    url = apiData?.next_page_url || url\n  }\n  const categoriesUrl = 'https://frontend-trial-api.qa.parallax.dev/api/categories';\n  const locationUrl = 'https://frontend-trial-api.qa.parallax.dev/api/locations';\n  const getCategories = () => {\n    setLoading(true);\n    fetch(categoriesUrl)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        setCategories(res.courses.data)\n        setLoading(false);\n      });\n  }\n  const getLocation = () => {\n    setLoading(true);\n    fetch(locationUrl)\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        setLocations(res.courses.data)\n        setLoading(false);\n      });\n  }\n  const getcoursesList = () => {\n    setLoading(true);\n    fetch(url)\n      .then(res => res.json())\n      .then(res => {\n        setcoursesList([...coursesList, ...res.courses.data]);\n        setApiData(res.courses)\n        setLoading(false);\n      });\n  }\n  useEffect(() => {\n    getCategories();\n    getLocation();\n    getcoursesList();\n  }, [page]);\n\n  let categoriesOptions: { value: string; label: string }[] = [];\n  // Make unique\n  categories.map(x => categoriesOptions?.push({ value: x.slug, label: x.name }));\n\n  let locationOptions: { value: string; label: string }[] = [];\n  // // Make unique\n  locations.map(x => locationOptions?.push({ value: x.slug, label: x.name }));\n\n  const filterCourses = () => {\n    // POST request using fetch inside useEffect React hook\n    console.log(selectedCategories.map(x => x.value));\n    setLoading(true);\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": selectedLocations.map(x => x.value),\n      }\n      )\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions)\n      .then(response => response.json())\n      .then(res => {\n        console.log(res);\n        setcoursesList(res.courses.data);\n        setApiData(res.courses)\n        setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (selectedCategories.length > 0) {\n      filterCourses();\n    } else {\n      getcoursesList();\n    }\n\n  }, [selectedCategories, selectedLocations]);\n  console.log(locations)\n  console.log(locationOptions)\n  return (\n    <div className=\"App\">\n      <Select\n        placeholder=\"Category\"\n        onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n          setSelectedCategories(newValue)\n        }}\n        options={categoriesOptions}\n        isMulti={true}\n        isClearable={true}\n      />\n       <Select\n        placeholder=\"Location\"\n        onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n          setSelectedLocations(newValue)\n        }}\n        options={locationOptions}\n        isMulti={true}\n        isClearable={true}\n      />\n\n      <table>\n        <thead>\n          <tr>\n            <th>Course</th>\n            <th>ID</th>\n            <th>Price</th>\n            <th>Location</th>\n            <th>Dates</th>\n            <th>Link</th>\n          </tr>\n        </thead>\n        <tbody>\n          {coursesList.map(item => {\n            return (\n              <tr key={item.id}>\n                <td>{item.id}</td>\n                <td>{item.price}</td>\n                <td>{item.location}</td>\n                <td>{`${item.starts_at} - ${item.ends_at}`}</td>\n                <td>Register</td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n      {apiData?.current_page !== apiData?.last_page && <button className=\"btn-load-more\" onClick={() => setPage(page + 1)}>{loading ? 'Loading...' : 'Load More '}</button>}\n    </div>\n  )\n};\n"]},"metadata":{},"sourceType":"module"}