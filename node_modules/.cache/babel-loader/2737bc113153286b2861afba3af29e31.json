{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { Flex } from '../../defaultStyles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrainingCourses = () => {\n  _s();\n\n  function unique(array) {\n    return array.reduce((unique, item) => unique.includes(item) ? unique : [...unique, item], []);\n  }\n\n  const perPage = 3;\n  const [totalPages, setTotalPages] = useState(1);\n  const [page, setPage] = useState(1);\n  const [coursesList, setcoursesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n\n  if (page > 1) {\n    url = (apiData === null || apiData === void 0 ? void 0 : apiData.next_page_url) || url;\n  }\n\n  const categoriesUrl = 'https://frontend-trial-api.qa.parallax.dev/api/categories';\n  useEffect(() => {\n    const getCategories = () => {\n      setLoading(true);\n      fetch(categoriesUrl).then(res => res.json()).then(res => {\n        console.log(res);\n        setCategories(res.courses.data);\n        setLoading(false);\n      });\n    };\n\n    getCategories();\n\n    const getcoursesList = () => {\n      setLoading(true);\n      fetch(url).then(res => res.json()).then(res => {\n        setTotalPages(res.last_page);\n        setcoursesList([...coursesList, ...res.courses.data]);\n        setApiData(res.courses);\n        setLoading(false);\n      });\n    };\n\n    getcoursesList();\n  }, [page]);\n  let categoriesOptions = []; // Make unique\n\n  categories.map(x => categoriesOptions === null || categoriesOptions === void 0 ? void 0 : categoriesOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n\n  const filterCourses = () => {\n    // POST request using fetch inside useEffect React hook\n    console.log(selectedCategories.map(x => x.value));\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": [\"leeds\"]\n      })\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions).then(response => response.json()).then(res => {\n      console.log(res); // setTotalPages(res.last_page);\n      // setcoursesList(res.courses.data);\n      // setApiData(res.courses)\n      // setLoading(false);\n    });\n  };\n\n  useEffect(() => {\n    filterCourses();\n  }, [selectedCategories]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Select, {\n      placeholder: \"Category\",\n      onChange: value => {\n        setSelectedCategories([value]);\n      },\n      options: categoriesOptions,\n      isMulti: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), coursesList === null || coursesList === void 0 ? void 0 : coursesList.map((x, i) => {\n      var _x$name;\n\n      // Tidy up\n      let name = x === null || x === void 0 ? void 0 : (_x$name = x.name) === null || _x$name === void 0 ? void 0 : _x$name.replace('<p>', '').replace('</p>', '');\n      return /*#__PURE__*/_jsxDEV(Flex, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"div\", {\n          children: x.category\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: x.location\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 52\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 16\n      }, this);\n    }), (apiData === null || apiData === void 0 ? void 0 : apiData.current_page) !== (apiData === null || apiData === void 0 ? void 0 : apiData.last_page) && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn-load-more\",\n      onClick: () => setPage(page + 1),\n      children: loading ? 'Loading...' : 'Load More '\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 56\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrainingCourses, \"An61Ka7ruMTqdGTRpSNjvnjROLw=\");\n\n_c = TrainingCourses;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainingCourses\");","map":{"version":3,"sources":["/Users/sam/Desktop/parallax-test/my-app/src/components/trainingCourses/index.tsx"],"names":["React","useEffect","useState","Select","Flex","TrainingCourses","unique","array","reduce","item","includes","perPage","totalPages","setTotalPages","page","setPage","coursesList","setcoursesList","loading","setLoading","apiData","setApiData","categories","setCategories","selectedCategories","setSelectedCategories","url","next_page_url","categoriesUrl","getCategories","fetch","then","res","json","console","log","courses","data","getcoursesList","last_page","categoriesOptions","map","x","push","value","slug","label","name","filterCourses","requestOptions","method","headers","body","JSON","stringify","response","i","replace","category","location","current_page"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAwC,cAAxC;AACA,SAASC,IAAT,QAAqB,qBAArB;;AAIA,OAAO,MAAMC,eAAyB,GAAG,MAAM;AAAA;;AAC7C,WAASC,MAAT,CAAgBC,KAAhB,EAA8B;AAC5B,WAAOA,KAAK,CAACC,MAAN,CACL,CAACF,MAAD,EAASG,IAAT,KAAmBH,MAAM,CAACI,QAAP,CAAgBD,IAAhB,IAAwBH,MAAxB,GAAiC,CAAC,GAAGA,MAAJ,EAAYG,IAAZ,CAD/C,EAEL,EAFK,CAAP;AAID;;AACD,QAAME,OAAO,GAAG,CAAhB;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAkBb,QAAQ,CAAC,CAAD,CAAhC;AACA,QAAM,CAACc,WAAD,EAAcC,cAAd,IAAgCf,QAAQ,CAAW,EAAX,CAA9C;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACkB,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,EAAtC;AACA,QAAM,CAACoB,UAAD,EAAaC,aAAb,IAA8BrB,QAAQ,CAAa,EAAb,CAA5C;AACA,QAAM,CAACsB,kBAAD,EAAqBC,qBAArB,IAA8CvB,QAAQ,CAAQ,EAAR,CAA5D;AAEA,MAAIwB,GAAG,GAAI,uDAAX;;AACA,MAAIZ,IAAI,GAAG,CAAX,EAAc;AACZY,IAAAA,GAAG,GAAG,CAAAN,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEO,aAAT,KAA0BD,GAAhC;AACD;;AACD,QAAME,aAAa,GAAG,2DAAtB;AACA3B,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,aAAa,GAAG,MAAM;AAC1BV,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAW,MAAAA,KAAK,CAACF,aAAD,CAAL,CACGG,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACXE,QAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAT,QAAAA,aAAa,CAACS,GAAG,CAACI,OAAJ,CAAYC,IAAb,CAAb;AACAlB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OANH;AAOD,KATD;;AAUAU,IAAAA,aAAa;;AAEb,UAAMS,cAAc,GAAG,MAAM;AAC3BnB,MAAAA,UAAU,CAAC,IAAD,CAAV;AACAW,MAAAA,KAAK,CAACJ,GAAD,CAAL,CACGK,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACXnB,QAAAA,aAAa,CAACmB,GAAG,CAACO,SAAL,CAAb;AACAtB,QAAAA,cAAc,CAAC,CAAC,GAAGD,WAAJ,EAAiB,GAAGgB,GAAG,CAACI,OAAJ,CAAYC,IAAhC,CAAD,CAAd;AACAhB,QAAAA,UAAU,CAACW,GAAG,CAACI,OAAL,CAAV;AACAjB,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD,OAPH;AAQD,KAVD;;AAWAmB,IAAAA,cAAc;AACf,GAzBQ,EAyBN,CAACxB,IAAD,CAzBM,CAAT;AA2BA,MAAI0B,iBAAqD,GAAG,EAA5D,CAhD6C,CAiD7C;;AACAlB,EAAAA,UAAU,CAACmB,GAAX,CAAeC,CAAC,IAAIF,iBAAJ,aAAIA,iBAAJ,uBAAIA,iBAAiB,CAAEG,IAAnB,CAAwB;AAAEC,IAAAA,KAAK,EAAEF,CAAC,CAACG,IAAX;AAAiBC,IAAAA,KAAK,EAAEJ,CAAC,CAACK;AAA1B,GAAxB,CAApB;;AAEA,QAAMC,aAAa,GAAG,MAAM;AAC1B;AACJd,IAAAA,OAAO,CAACC,GAAR,CAAYX,kBAAkB,CAACiB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACE,KAA9B,CAAZ;AAEI,UAAMK,cAAc,GAAG;AACrBC,MAAAA,MAAM,EAAE,MADa;AAErBC,MAAAA,OAAO,EAAE;AAAE,wBAAgB;AAAlB,OAFY;AAGrBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,sBAAc9B,kBAAkB,CAACiB,GAAnB,CAAuBC,CAAC,IAAIA,CAAC,CAACE,KAA9B,CADK;AAEnB,qBAAa,CAAC,OAAD;AAFM,OAAf;AAHe,KAAvB;AASAd,IAAAA,KAAK,CAAC,wDAAD,EAA2DmB,cAA3D,CAAL,CACGlB,IADH,CACQwB,QAAQ,IAAIA,QAAQ,CAACtB,IAAT,EADpB,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACXE,MAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ,EADW,CAEX;AACA;AACA;AACA;AACD,KARH;AASD,GAtBD;;AAwBA/B,EAAAA,SAAS,CAAC,MAAM;AACd+C,IAAAA,aAAa;AACd,GAFQ,EAEN,CAACxB,kBAAD,CAFM,CAAT;AAGA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,4BACE,QAAC,MAAD;AACE,MAAA,WAAW,EAAC,UADd;AAEE,MAAA,QAAQ,EAAGoB,KAAD,IAAW;AACnBnB,QAAAA,qBAAqB,CAAC,CAACmB,KAAD,CAAD,CAArB;AACD,OAJH;AAKE,MAAA,OAAO,EAAEJ,iBALX;AAME,MAAA,OAAO,EAAE;AANX;AAAA;AAAA;AAAA;AAAA,YADF,EAUGxB,WAVH,aAUGA,WAVH,uBAUGA,WAAW,CAAEyB,GAAb,CAAiB,CAACC,CAAD,EAAYc,CAAZ,KAAkB;AAAA;;AAClC;AACA,UAAIT,IAAI,GAAGL,CAAH,aAAGA,CAAH,kCAAGA,CAAC,CAAEK,IAAN,4CAAG,QAASU,OAAT,CAAiB,KAAjB,EAAwB,EAAxB,EAA4BA,OAA5B,CAAoC,MAApC,EAA4C,EAA5C,CAAX;AACA,0BAAO,QAAC,IAAD;AAAA,gCACL;AAAA,oBAAMV;AAAN;AAAA;AAAA;AAAA;AAAA,gBADK,oBACa;AAAA,oBAAML,CAAC,CAACgB;AAAR;AAAA;AAAA;AAAA;AAAA,gBADb,eACoC;AAAA,oBAAMhB,CAAC,CAACiB;AAAR;AAAA;AAAA;AAAA;AAAA,gBADpC;AAAA;AAAA;AAAA;AAAA;AAAA,cAAP;AAGD,KANA,CAVH,EAiBG,CAAAvC,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEwC,YAAT,OAA0BxC,OAA1B,aAA0BA,OAA1B,uBAA0BA,OAAO,CAAEmB,SAAnC,kBAAgD;AAAQ,MAAA,SAAS,EAAC,eAAlB;AAAkC,MAAA,OAAO,EAAE,MAAMxB,OAAO,CAACD,IAAI,GAAG,CAAR,CAAxD;AAAA,gBAAqEI,OAAO,GAAG,YAAH,GAAkB;AAA9F;AAAA;AAAA;AAAA;AAAA,YAjBnD;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAqBD,CApGM;;GAAMb,e;;KAAAA,e","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select, { OptionsOrGroups } from 'react-select';\nimport { Flex } from '../../defaultStyles';\n\nimport { Category, Course, Courses } from '../../types';\n\nexport const TrainingCourses: React.FC = () => {\n  function unique(array: any[]) {\n    return array.reduce(\n      (unique, item) => (unique.includes(item) ? unique : [...unique, item]),\n      [],\n    );\n  }\n  const perPage = 3;\n  const [totalPages, setTotalPages] = useState(1);\n  const [page, setPage] = useState(1);\n  const [coursesList, setcoursesList] = useState<Course[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState<Courses>();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<any[]>([]);\n\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n  if (page > 1) {\n    url = apiData?.next_page_url || url\n  }\n  const categoriesUrl = 'https://frontend-trial-api.qa.parallax.dev/api/categories';\n  useEffect(() => {\n    const getCategories = () => {\n      setLoading(true);\n      fetch(categoriesUrl)\n        .then(res => res.json())\n        .then(res => {\n          console.log(res)\n          setCategories(res.courses.data)\n          setLoading(false);\n        });\n    }\n    getCategories();\n\n    const getcoursesList = () => {\n      setLoading(true);\n      fetch(url)\n        .then(res => res.json())\n        .then(res => {\n          setTotalPages(res.last_page);\n          setcoursesList([...coursesList, ...res.courses.data]);\n          setApiData(res.courses)\n          setLoading(false);\n        });\n    }\n    getcoursesList();\n  }, [page]);\n\n  let categoriesOptions: { value: string; label: string }[] = [];\n  // Make unique\n  categories.map(x => categoriesOptions?.push({ value: x.slug, label: x.name }));\n\n  const filterCourses = () => {\n    // POST request using fetch inside useEffect React hook\nconsole.log(selectedCategories.map(x => x.value));\n\n    const requestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        \"categories\": selectedCategories.map(x => x.value),\n        \"locations\": [\"leeds\"]\n      }\n      )\n    };\n    fetch('https://frontend-trial-api.qa.parallax.dev/api/courses', requestOptions)\n      .then(response => response.json())\n      .then(res => {\n        console.log(res);\n        // setTotalPages(res.last_page);\n        // setcoursesList(res.courses.data);\n        // setApiData(res.courses)\n        // setLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    filterCourses()\n  }, [selectedCategories])\n  return (\n    <div className=\"App\">\n      <Select\n        placeholder=\"Category\"\n        onChange={(value) => {\n          setSelectedCategories([value])\n        }}\n        options={categoriesOptions}\n        isMulti={true}\n      />\n\n      {coursesList?.map((x: Course, i) => {\n        // Tidy up\n        let name = x?.name?.replace('<p>', '').replace('</p>', '');\n        return <Flex>\n          <div>{name}</div> <div>{x.category}</div><div>{x.location}</div>\n        </Flex>\n      })}\n      {apiData?.current_page !== apiData?.last_page && <button className=\"btn-load-more\" onClick={() => setPage(page + 1)}>{loading ? 'Loading...' : 'Load More '}</button>}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}