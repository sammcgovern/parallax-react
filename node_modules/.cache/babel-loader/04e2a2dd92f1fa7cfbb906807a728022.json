{"ast":null,"code":"export const getCoursesList = _ref => {\n  let {\n    setLoading,\n    setCoursesList,\n    setApiData,\n    coursesList,\n    page,\n    apiData\n  } = _ref;\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n\n  if (page > 1) {\n    url = (apiData === null || apiData === void 0 ? void 0 : apiData.next_page_url) || url;\n  }\n\n  setLoading(true);\n  fetch(url).then(res => res.json()).then(res => {\n    setCoursesList([...coursesList, ...res.courses.data]);\n    setApiData(res.courses);\n    setLoading(false);\n  });\n};","map":{"version":3,"sources":["/Users/sam/Desktop/parallax-test/my-app/src/dataCalls/getCoursesList.tsx"],"names":["getCoursesList","setLoading","setCoursesList","setApiData","coursesList","page","apiData","url","next_page_url","fetch","then","res","json","courses","data"],"mappings":"AAWA,OAAO,MAAMA,cAAc,GAAG,QAAgF;AAAA,MAA/E;AAACC,IAAAA,UAAD;AAAaC,IAAAA,cAAb;AAA6BC,IAAAA,UAA7B;AAAyCC,IAAAA,WAAzC;AAAsDC,IAAAA,IAAtD;AAA4DC,IAAAA;AAA5D,GAA+E;AAC5G,MAAIC,GAAG,GAAI,uDAAX;;AACA,MAAIF,IAAI,GAAG,CAAX,EAAc;AACZE,IAAAA,GAAG,GAAG,CAAAD,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEE,aAAT,KAA0BD,GAAhC;AACD;;AAECN,EAAAA,UAAU,CAAC,IAAD,CAAV;AACAQ,EAAAA,KAAK,CAACF,GAAD,CAAL,CACGG,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAEQC,GAAG,IAAI;AACXT,IAAAA,cAAc,CAAC,CAAC,GAAGE,WAAJ,EAAiB,GAAGO,GAAG,CAACE,OAAJ,CAAYC,IAAhC,CAAD,CAAd;AACAX,IAAAA,UAAU,CAACQ,GAAG,CAACE,OAAL,CAAV;AACAZ,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GANH;AAOD,CAdI","sourcesContent":["import { Course, Courses } from \"../types\";\n\ntype Props = {\n    setLoading: (loading: boolean) => void;\n    setCoursesList: (courses: Course[]) => void;\n    setApiData: (courses: Courses) => void;\n    coursesList: Course[]; \n    page: number;\n    apiData: Courses | undefined;\n};\n\nexport const getCoursesList = ({setLoading, setCoursesList, setApiData, coursesList, page, apiData}:Props) => {\n  let url = `http://frontend-trial-api.qa.parallax.dev/api/courses`;\n  if (page > 1) {\n    url = apiData?.next_page_url || url\n  }\n\n    setLoading(true);\n    fetch(url)\n      .then(res => res.json())\n      .then(res => {\n        setCoursesList([...coursesList, ...res.courses.data]);\n        setApiData(res.courses)\n        setLoading(false);\n      });\n  }"]},"metadata":{},"sourceType":"module"}