{"ast":null,"code":"var _jsxFileName = \"/Users/sam/Desktop/parallax-test/my-app/src/components/TrainingCourses/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Select from 'react-select';\nimport { filterCourses } from '../../dataCalls/filterCourses';\nimport { getCategories } from '../../dataCalls/getCategories';\nimport { getCoursesList } from '../../dataCalls/getCoursesList';\nimport { getLocations } from '../../dataCalls/getLocation';\nimport { Flex, H1, Page } from '../../defaultStyles';\nimport { CourseTable } from '../Table';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TrainingCourses = () => {\n  _s();\n\n  const [page, setPage] = useState(1);\n  const [coursesList, setCoursesList] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState();\n  const [categories, setCategories] = useState([]);\n  const [selectedCategories, setSelectedCategories] = useState([]);\n  const [locations, setLocations] = useState([]);\n  const [selectedLocations, setSelectedLocations] = useState([]);\n  useEffect(() => {\n    getCategories({\n      setLoading,\n      setCategories\n    });\n    getLocations({\n      setLoading,\n      setLocations\n    });\n    getCoursesList({\n      setLoading,\n      setCoursesList,\n      setApiData,\n      coursesList,\n      page,\n      apiData\n    });\n  }, [page]);\n  let categoriesOptions = []; // Make unique\n\n  categories.map(x => categoriesOptions === null || categoriesOptions === void 0 ? void 0 : categoriesOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n  let locationOptions = []; // // Make unique\n\n  locations.map(x => locationOptions === null || locationOptions === void 0 ? void 0 : locationOptions.push({\n    value: x.slug,\n    label: x.name\n  }));\n  useEffect(() => {\n    if (selectedCategories.length > 0 || selectedLocations.length > 0) {\n      filterCourses({\n        categories,\n        locations,\n        setLoading,\n        selectedCategories,\n        selectedLocations,\n        setCoursesList,\n        setApiData\n      });\n    } else {\n      getCoursesList({\n        setLoading,\n        setCoursesList,\n        setApiData,\n        coursesList,\n        page,\n        apiData\n      });\n    }\n  }, [selectedCategories, selectedLocations]);\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(H1, {\n      children: \"Training Courses\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flex, {\n      children: [/*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Category\",\n        onChange: newValue => {\n          setSelectedCategories(newValue);\n        },\n        options: categoriesOptions,\n        isMulti: true,\n        isClearable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        placeholder: \"Location\",\n        onChange: newValue => {\n          setSelectedLocations(newValue);\n        },\n        options: locationOptions,\n        isMulti: true,\n        isClearable: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CourseTable, {\n      apiData: apiData,\n      coursesList: coursesList,\n      loading: loading,\n      page: page,\n      setPage: setPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TrainingCourses, \"iDHoRMMWXxlLF589nr38U25W++U=\");\n\n_c = TrainingCourses;\n\nvar _c;\n\n$RefreshReg$(_c, \"TrainingCourses\");","map":{"version":3,"sources":["/Users/sam/Desktop/parallax-test/my-app/src/components/TrainingCourses/index.tsx"],"names":["React","useEffect","useState","Select","filterCourses","getCategories","getCoursesList","getLocations","Flex","H1","Page","CourseTable","TrainingCourses","page","setPage","coursesList","setCoursesList","loading","setLoading","apiData","setApiData","categories","setCategories","selectedCategories","setSelectedCategories","locations","setLocations","selectedLocations","setSelectedLocations","categoriesOptions","map","x","push","value","slug","label","name","locationOptions","length","newValue"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Select, { MultiValue } from 'react-select';\nimport { filterCourses } from '../../dataCalls/filterCourses';\nimport { getCategories } from '../../dataCalls/getCategories';\nimport { getCoursesList } from '../../dataCalls/getCoursesList';\nimport { getLocations } from '../../dataCalls/getLocation';\nimport { Flex, H1, Page } from '../../defaultStyles';\n\nimport { Category, Course, Courses, Location } from '../../types';\nimport { CourseTable } from '../Table';\n\nexport const TrainingCourses: React.FC = () => {\n  const [page, setPage] = useState<number>(1);\n  const [coursesList, setCoursesList] = useState<Course[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [apiData, setApiData] = useState<Courses>();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<MultiValue<{ value: string; label: string; }>>([]);\n  const [locations, setLocations] = useState<Location[]>([]);\n  const [selectedLocations, setSelectedLocations] = useState<MultiValue<{ value: string; label: string; }>>([]);\n\n  useEffect(() => {\n    getCategories({ setLoading, setCategories });\n    getLocations({ setLoading, setLocations });\n    getCoursesList({ setLoading, setCoursesList, setApiData, coursesList, page, apiData });\n  }, [page]);\n\n  let categoriesOptions: { value: string; label: string }[] = [];\n  // Make unique\n  categories.map(x => categoriesOptions?.push({ value: x.slug, label: x.name }));\n  let locationOptions: { value: string; label: string }[] = [];\n  // // Make unique\n  locations.map(x => locationOptions?.push({ value: x.slug, label: x.name }));\n\n\n  useEffect(() => {\n    if (selectedCategories.length > 0 || selectedLocations.length > 0) {\n      filterCourses({ categories, locations, setLoading, selectedCategories, selectedLocations, setCoursesList, setApiData });\n    } else {\n      getCoursesList({ setLoading, setCoursesList, setApiData, coursesList, page, apiData });\n    }\n\n  }, [selectedCategories, selectedLocations]);\n\n  return (\n    <Page>\n      <H1>Training Courses</H1>\n      <Flex>\n        <Select\n          placeholder=\"Category\"\n          onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n            setSelectedCategories(newValue)\n          }}\n          options={categoriesOptions}\n          isMulti={true}\n          isClearable={true}\n        />\n        <Select\n          placeholder=\"Location\"\n          onChange={(newValue: MultiValue<{ value: string; label: string; }>) => {\n            setSelectedLocations(newValue)\n          }}\n          options={locationOptions}\n          isMulti={true}\n          isClearable={true}\n        />\n      </Flex>\n\n      <CourseTable apiData={apiData} coursesList={coursesList} loading={loading} page={page} setPage={setPage} />\n    </Page>\n  )\n};\n"]},"metadata":{},"sourceType":"module"}